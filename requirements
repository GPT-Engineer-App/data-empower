import streamlit as st
import pandas as pd
import plotly.express as px
from scipy.stats import linregress

# Set page configuration
st.set_page_config(page_title="Data Visualization App", layout="wide")

# Initialize session state
if "data" not in st.session_state:
    st.session_state.data = None

# Page 1: CSV Upload and Data Overview
def page1():
    st.title("Data Visualization App")
    st.subheader("CSV Upload")

    # CSV file upload
    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

    if uploaded_file is not None:
        # Read CSV data
        data = pd.read_csv(uploaded_file)
        st.session_state.data = data

        st.success("CSV file uploaded successfully!")
        if st.button("Proceed to Data Overview"):
            # Display data overview
            st.subheader("Data Overview")
            st.write(f"Total Rows: {data.shape[0]}")
            st.write(f"Total Columns: {data.shape[1]}")

            # Display column list
            st.subheader("Column List")
            columns = data.columns.tolist()
            selected_columns = st.multiselect("Select columns to display", columns, default=columns[:5])

            # Display interactive table
            st.subheader("Interactive Table")
            num_rows = st.number_input("Number of rows to display", min_value=1, value=10)
            st.dataframe(data[selected_columns].head(num_rows))

            # Navigate to Page 2
            if st.button("Proceed to Chart Generation"):
                st.experimental_set_query_params(page="2")

# Page 2: Dynamic Chart Generation
def page2():
    st.title("Data Visualization App")
    st.subheader("Dynamic Chart Generation")

    if st.session_state.data is not None:
        data = st.session_state.data
        columns = data.columns.tolist()

        # Configure charts
        num_charts = st.number_input("Number of charts to generate", min_value=1, max_value=10, value=1)

        for i in range(num_charts):
            st.subheader(f"Chart {i+1}")

            col1, col2 = st.columns([1, 3])

            with col1:
                x_column = st.selectbox(f"Select X-axis column for Chart {i+1}", columns)
                y_columns = st.multiselect(f"Select Y-axis column(s) for Chart {i+1}", columns)
                x_type = st.radio(f"Select X-axis data type for Chart {i+1}", ("Number", "Date"))
                secondary_y = st.checkbox(f"Add secondary Y-axis for Chart {i+1}")
                trendline = st.checkbox(f"Add trendline for Chart {i+1}")
                if trendline:
                    trendline_type = st.selectbox(f"Select trendline type for Chart {i+1}", ("Linear", "Exponential", "Polynomial"))
                    if trendline_type == "Polynomial":
                        trendline_degree = st.number_input(f"Select trendline degree for Chart {i+1}", min_value=2, max_value=10, value=2)
                x_range = st.slider(f"Select X-axis range for Chart {i+1}", min_value=0, max_value=len(data)-1, value=(0, len(data)-1))

            with col2:
                if x_column and y_columns:
                    if x_type == "Date":
                        data[x_column] = pd.to_datetime(data[x_column])

                    fig = px.scatter(data, x=x_column, y=y_columns, range_x=[data[x_column].iloc[x_range[0]], data[x_column].iloc[x_range[1]]])

                    if secondary_y:
                        fig.update_layout(yaxis2=dict(title=f"Secondary Y-axis for Chart {i+1}", overlaying="y", side="right"))
                        fig.update_traces(yaxis="y2", selector=dict(name=y_columns[-1]))

                    if trendline:
                        for y_column in y_columns:
                            if trendline_type == "Linear":
                                slope, intercept, r_value, _, _ = linregress(data[x_column], data[y_column])
                                fig.add_shape(type="line", x0=data[x_column].min(), y0=slope*data[x_column].min()+intercept,
                                              x1=data[x_column].max(), y1=slope*data[x_column].max()+intercept,
                                              line=dict(color="red", width=2, dash="dash"))
                                st.write(f"Linear Trendline for {y_column}: y = {slope:.2f}x + {intercept:.2f}, R-value: {r_value:.2f}")
                            elif trendline_type == "Exponential":
                                fig.add_traces(px.scatter(data, x=x_column, y=y_column, trendline="exponential").data[1])
                                results = px.scatter(data, x=x_column, y=y_column, trendline="exponential").data[1].results
                                st.write(f"Exponential Trendline for {y_column}: {results.trend}")
                            elif trendline_type == "Polynomial":
                                fig.add_traces(px.scatter(data, x=x_column, y=y_column, trendline="polynomial", trendline_options=dict(degree=trendline_degree)).data[1])
                                results = px.scatter(data, x=x_column, y=y_column, trendline="polynomial", trendline_options=dict(degree=trendline_degree)).data[1].results
                                st.write(f"Polynomial Trendline for {y_column}: {results.trend}")

                    fig.update_layout(title=f"Chart {i+1}", xaxis_title=x_column, yaxis_title="Value")
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("Please select X-axis and Y-axis columns to generate the chart.")

        # Navigate back to Page 1
        if st.button("Back to CSV Upload"):
            st.experimental_set_query_params(page="1")
    else:
        st.warning("Please upload a CSV file on Page 1 to generate charts.")

# Main app
def main():
    page = st.experimental_get_query_params().get("page", ["1"])[0]

    if page == "1":
        page1()
    elif page == "2":
        page2()

if __name__ == "__main__":
    main()